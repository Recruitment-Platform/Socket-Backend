version: 2.1

orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@4.0
  aws-ecr: circleci/aws-ecr@9.0.0


executors:
  linux:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true


jobs:
  build-test:
    executor: linux
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: run build and test
          command: gradle clean build
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  sonar:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - run:
          name: send report sonarqube
          command: gradle sonar
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy:
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - run:
          name: set short sha
          command: |
            echo 'export SHORT_SHA=${CIRCLE_SHA1:0:7}' >> "$BASH_ENV"
            source "$BASH_ENV"
      - aws-cli/setup
      - aws-ecr/ecr_login:
          public_registry: true
      - run:
          name: push Image to ECR
          command: gradle jib
      - run:
          name: connect ec2 and deploy
          command: |
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST SHORT_SHA=$SHORT_SHA AWS_ECR_URL=$AWS_ECR_URL sh < deploy.sh
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1


workflows:
  build-and-deploy:
    jobs:
      - build-test:
          context:
            - slack-secret
            - prod-deploy

      - sonar:
          context:
            - SonarCloud
            - prod-deploy
          requires:
            - build-test

      - deploy:
          requires:
            - build-test
            - sonar
          context:
            - slack-secret
            - prod-deploy
          filters:
            branches:
              only:
                - main
          


