plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id "org.sonarqube" version "4.2.1.3168"
    id 'com.google.cloud.tools.jib' version '3.3.2'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    // jwt 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
}


asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    sources {
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report는 항상 테스트가 끝난 후에 생성되어야함

}

sonar {
    properties {
        property 'sonar.projectKey', 'Recruitment-Platform_Socket-Backend'
        property 'sonar.organization', 'socket-recruitment-projec'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.exclusions', '**/*Application*.java, **/*Exception*.java, **/resources/*,' +
                '**/CommonDocController.java, **/ProblemDetailFieldDescription.java, **/RestDocsAttributeFactory.java'
    }
}

jacoco {
    toolVersion = '0.8.10'
}

jacocoTestReport {
    dependsOn test // report가 테스트 후에 실행되게 하는 설정
    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',  // 테스트를 제외할 경로를 Ant 스타일로 작성
                            '**/*Exception*',
                    ])
                })
        )
    }

    finalizedBy jacocoTestCoverageVerification //verification은 report 이후에 시작해야함
}

task testCoverageSonar(type: Test) {
    group 'verification'
    description 'Runs unit tests with coverage sonarCloud'
    dependsOn(':test',
            ':jacocoTestReport',
            ':sonar',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['sonar'].mustRunAfter(tasks['jacocoTestReport'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['sonar'])
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport // jacocoTestReport 작업 이후에 실행되어야함
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH' // 조건문 등의 분기 수
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'LINE' // 빈 줄을 제외한 실제 코드 라인수
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // jacocoTestReport의 작성과 다르게 패키지 + 클래스명을 적어야함
            excludes = [
                    '*.*Application',
                    '*.*Exception',
            ]
        }
    }
}

jib {
    from {
        image = "openjdk:17-jdk-slim"
    }
    to {
        image = System.getenv("AWS_ECR_URL") ?: ""
        tags = [System.getenv("SHORT_SHA")]
    }

    container {
        environment = [
                "SPRING_PROFILES_ACTIVE": System.getenv("SPRING_PROFILES_ACTIVE"),
                "datasource.url"        : System.getenv("DATASOURCE_URL"),
                "datasource.username"   : System.getenv("DATASOURCE_USERNAME"),
                "datasource.password"   : System.getenv("DATASOURCE_PASSWORD"),
                "CORS_ALLOW_ORIGINS"    : System.getenv("CORS_ALLOW_ORIGINS"),
                "JWT_KEY"               : System.getenv("JWT_KEY"),
                "GITHUB_CLIENT_ID"      : System.getenv("GITHUB_CLIENT_ID"),
                "GITHUB_CLIENT_SECRET"  : System.getenv("GITHUB_CLIENT_SECRET"),
                "KAKAO_CLIENT_ID"       : System.getenv("KAKAO_CLIENT_ID"),
                "KAKAO_CLIENT_SECRET"   : System.getenv("KAKAO_CLIENT_SECRET"),
                "GOOGLE_CLIENT_ID"      : System.getenv("GOOGLE_CLIENT_ID"),
                "GOOGLE_CLIENT_SECRET"  : System.getenv("GOOGLE_CLIENT_SECRET"),
        ]
    }
}